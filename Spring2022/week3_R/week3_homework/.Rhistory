starbucks_cleaned$is_highest_fat <- ifelse(starbucks_cleaned == rowIndex_highest_calorie)
#exercise 1.4
baseball = read.csv("Batting.csv")
scoredAtLeastThree <- len(baseball[baseball$HR > 3])
scoredAtLeastThree <- length(baseball[baseball$HR > 3])
scoredAtLeastThree <- length(baseball[baseball$HR > 3,])
starbucks_cleaned$is_highest_fat <- (starbucks_cleaned$Calories == highest_calorie)
starbucks_cleaned$is_highest_fat
plot(x = starbucks_cleaned$Calories,
y = starbucks_cleaned$Carb,
col = starbucks_cleaned$is_highest_fat
main = "Starbucks Drinks Calories vs Carbs",
xlab = "Calories",
ylab = "Carbs (grams)")
plot(x = starbucks_cleaned$Calories,
y = starbucks_cleaned$Carb,
col = starbucks_cleaned$is_highest_fat,
main = "Starbucks Drinks Calories vs Carbs",
xlab = "Calories",
ylab = "Carbs (grams)")
plot(x = starbucks_cleaned$Calories,
y = starbucks_cleaned$Carb,
col = starbucks_cleaned$is_highest_fat,
main = "Starbucks Drinks Calories vs Carbs",
xlab = "Calories",
ylab = "Carbs (grams)")
plot(x = starbucks_cleaned$Calories,
y = starbucks_cleaned$Carb,
col = factor(starbucks_cleaned$is_highest_fat),
main = "Starbucks Drinks Calories vs Carbs",
xlab = "Calories",
ylab = "Carbs (grams)")
scoredAtLeastThree <- length(baseball[baseball$HR > 3,])
scoredAtLeastThree
plot_baseball("All", baseball$HR, baseball$yearID)
plot_baseball = function(teamName, homeruns, year) {
plot(x = year, y = homeruns,
main = paste("home runs over time for", teamName))
}
plot_baseball("All", baseball$HR, baseball$yearID)
plot(x = year, y = homeruns,
main = paste("home runs over time for", teamName),
xlab = "Year"
ylab = "Home Runs")
plot_baseball("All", baseball$HR, baseball$yearID)
plot(x = year, y = homeruns,
main = paste("home runs over time for", teamName),
xlab = "Year",
ylab = "Home Runs")
plot_baseball("All Teams", baseball$HR, baseball$yearID)
plot(x = year, y = homeruns,
main = paste("Home Runs Over Time For", teamName),
xlab = "Year",
ylab = "Home Runs")
plot_baseball("All Teams", baseball$HR, baseball$yearID)
#exercise 1.4
baseball <- read.csv("Batting.csv")
scoredAtLeastThree <- length(baseball[baseball$HR > 3,])
plot_baseball = function(teamName, homeruns, year) {
plot(x = year, y = homeruns,
main = paste("Home Runs Over Time For", teamName),
xlab = "Year",
ylab = "Home Runs")
}
plot_baseball("All Teams", baseball$HR, baseball$yearID)
plot_baseball("All Teams", baseball$HR, baseball$yearID)
plot(x = year, y = homeruns,
main = paste("Home Runs Over Time For", teamName),
xlab = "Year",
ylab = "Home Runs")
plot(x = year, y = homeruns,
main = paste("Home Runs Over Time For", teamName),
xlab = "Year",
ylab = "Home Runs")
plot_baseball("All Teams", baseball$HR, baseball$yearID)
plot_baseball = function(teamName, homeruns, year) {
plot(x = year, y = homeruns,
main = paste("Home Runs Over Time For", teamName),
xlab = "Year",
ylab = "Home Runs")
}
plot_baseball("All Teams", baseball$HR, baseball$yearID)
plot_baseball = function(teamName, homeruns, year) {
plot(x = year, y = homeruns,
main = paste("Home Runs Over Time For", teamName),
xlab = "Year",
ylab = "Home Runs")
}
plot_baseball("All Teams", baseball$HR, baseball$yearID)
LA_Angels <- baseball[baseball$teamID == "LAA", ]
plot_baseball("LA_Angles", LA_Angels$HR, LA_Angels$yearID)
plot_baseball("LA Angles", LA_Angels$HR, LA_Angels$yearID)
head(baseball$HR)
plot_baseball("All Teams", sum(baseball$HR), baseball$yearID)
plot_baseball("All Teams", sumRow(baseball$HR), baseball$yearID)
plot_baseball("All Teams", sumRows(baseball$HR), baseball$yearID)
plot_baseball = function(teamName, homeruns, year) {
plot(x = year, y = homeruns,
main = paste("Home Runs Over Time For", teamName),
xlab = "Year",
ylab = "Home Runs")
}
plot_baseball("All Teams", sumRows(baseball$HR), baseball$yearID)
numHomeRuns <- sumRows(baseball$HR)
numHomeRuns <- rowSums(baseball$HR)
plot(x = year, y = count(homeruns),
main = paste("Home Runs Over Time For", teamName),
xlab = "Year",
ylab = "Home Runs")
plot_baseball = function(teamName, homeruns, year) {
plot(x = year, y = count(homeruns),
main = paste("Home Runs Over Time For", teamName),
xlab = "Year",
ylab = "Home Runs")
}
plot_baseball = function(teamName, homeruns, year) {
plot(x = year, y = count(homeruns),
main = paste("Home Runs Over Time For", teamName),
xlab = "Year",
ylab = "Home Runs")
}
plot_baseball("All Teams", baseball$HR, baseball$yearID)
}
plot_baseball = function(teamName, dataframe) {
years = dataframe$yearID
}
head(baseball)
#exercise 1.5
easy_plot = function(x, y, color_data) {
median_color <- median(color_data)
levels <- ifelse(color_data < median_color, "low","high")
levels = factor(levels)
print(median_color)
plot(x = x, y = y, col = levels, pch=20)
print(cor.test(x, y))
}
easy_plot(c(1, 2, 3), c(4, 5, 6), c(1, 2, 3))
#each datapoint is a different color
easy_plot(starbucks_cleaned$Calories, starbucks_cleaned$Carb, starbucks_cleaned$Sodium)
plot(x = starbucks_cleaned$Calories,
y = starbucks_cleaned$Carb,
main = "Starbucks Drinks Calories vs Carbs",
xlab = "Calories",
ylab = "Carbs (grams)")
plot_baseball("All Teams", baseball)
plot_baseball = function(teamName, dataframe) {
aggregate(x = dataframe,
by = dataframe$yearID,
FUN = count)
}
plot_baseball("All Teams", baseball)
plot_baseball = function(teamName, dataframe) {
print(dataframe$yearID)
aggregate(x = dataframe,
by = dataframe$yearID,
FUN = count)
}
plot_baseball("All Teams", baseball)
print(unique(dataframe$yearID))
plot_baseball = function(teamName, dataframe) {
print(unique(dataframe$yearID))
aggregate(x = dataframe,
by = dataframe$yearID,
FUN = count)
}
plot_baseball("All Teams", baseball)
plot_baseball = function(teamName, dataframe) {
print(unique(dataframe$yearID))
aggregate(x = dataframe,
by = unique(dataframe$yearID),
FUN = count)
}
plot_baseball("All Teams", baseball)
plot_baseball = function(teamName, dataframe) {
print(unique(dataframe$yearID))
aggregate(x = dataframe,
by = list(unique(dataframe$yearID)),
FUN = count)
}
plot_baseball("All Teams", baseball)
plot_baseball = function(teamName, dataframe) {
print(unique(dataframe$yearID))
aggregate(x = dataframe,
by = list(dataframe$yearID),
FUN = count)
}
plot_baseball("All Teams", baseball)
plot_baseball = function(teamName, dataframe) {
print(aggregate(x = dataframe,
by = list(dataframe$yearID),
FUN = count))
}
plot_baseball("All Teams", baseball)
head(baseball)
plot_baseball = function(teamName, dataframe) {
agg <- aggregate(x = dataframe[, (2, 12)],
by = list(dataframe$yearID),
FUN = count)
}
plot_baseball = function(teamName, dataframe) {
plot_baseball = function(teamName, dataframe) {
agg <- aggregate(x = dataframe[, c(2, 12)],
by = list(dataframe$yearID),
FUN = count)
}
plot_baseball("All Teams", baseball)
plot_baseball = function(teamName, dataframe) {
agg <- aggregate(x = dataframe[, c(2, 12)],
by = list(dataframe$yearID),
FUN = count)
print(agg)
}
plot_baseball("All Teams", baseball)
plot_baseball = function(teamName, dataframe) {
agg <- aggregate(x = dataframe[, c(2, 12)],
by = list(dataframe$yearID),
FUN = count)
print(agg)
}
plot_baseball("All Teams", baseball)
head(baseball)
#exercise 1.4
baseball <- read.csv("Batting.csv")
head(baseball)
print(baseball)
clear
head(baseball)
#exercise 1.4
baseball <- read.csv("Batting.csv")
head(baseball)
head(baseball)
plot_baseball = function(teamName, dataframe) {
agg <- aggregate(x = dataframe[, c(2, 12)],
by = list(dataframe$yearID),
FUN = count)
print(agg)
}
plot_baseball("All Teams", baseball)
plot_baseball = function(teamName, dataframe) {
agg <- aggregate(x = dataframe[, 12],
by = list(dataframe$yearID),
FUN = count)
print(agg)
}
plot_baseball("All Teams", baseball)
plot_baseball = function(teamName, dataframe) {
agg <- aggregate(x = dataframe[, 12],
by = list(dataframe$yearID),
FUN = count)
plot(x = agg$x, y = agg$Group.1)
}
plot_baseball("All Teams", baseball)
plot_baseball = function(teamName, dataframe) {
agg <- aggregate(x = dataframe[, 12],
by = list(dataframe$yearID),
FUN = count)
plot(x = agg$Group.1, y = agg$x)
}
plot_baseball("All Teams", baseball)
LA_Angels <- baseball[baseball$teamID == "LAA", ]
plot_baseball("LA Angles", LA_Angels)
LA_Angels
plot_baseball = function(teamName, dataframe) {
agg <- aggregate(x = dataframe[, 12],
by = list(dataframe$yearID),
FUN = count)
plot(x = agg$Group.1, y = agg$x, col = factor(dataframe$Group.1))
}
plot_baseball("All Teams", baseball)
plot_baseball = function(teamName, dataframe) {
agg <- aggregate(x = dataframe[, 12],
by = list(dataframe$yearID),
FUN = count)
print(head(agg))
plot(x = agg$Group.1, y = agg$x, col = factor(dataframe$Group.1))
}
plot_baseball("All Teams", baseball)
plot_baseball = function(teamName, dataframe) {
agg <- aggregate(x = dataframe[, 12],
by = list(dataframe$yearID),
FUN = count)
print(head(agg))
plot(x = agg$Group.1, y = agg$x, col = factor(agg$Group.1))
}
plot_baseball("All Teams", baseball)
plot_baseball = function(teamName, dataframe) {
agg <- aggregate(x = dataframe[, 12],
by = list(dataframe$yearID),
FUN = count)
plot(x = agg$Group.1, y = agg$x, col = factor(agg$Group.1))
}
plot_baseball("All Teams", baseball)
LA_Angels <- baseball[baseball$teamID == "LAA", ]
plot_baseball("LA Angles", LA_Angels)
plot_baseball = function(teamName, dataframe) {
agg <- aggregate(x = dataframe[, 12],
by = list(dataframe$yearID),
FUN = count)
print(agg$Group.1)
plot(x = agg$Group.1, y = agg$x, col = factor(agg$Group.1))
}
plot_baseball("All Teams", baseball)
LA_Angels <- baseball[baseball$teamID == "LAA", ]
head(baseball)
plot_baseball = function(teamName, dataframe) {
agg <- aggregate(x = dataframe[4, 12],
by = list(dataframe$yearID),
FUN = count)
print(agg)
plot(x = agg$Group.1, y = agg$x)
}
plot_baseball("All Teams", baseball)
plot_baseball = function(teamName, dataframe) {
agg <- aggregate(x = dataframe[, c(4,12)],
by = list(dataframe$yearID),
FUN = count)
print(agg)
plot(x = agg$Group.1, y = agg$x)
}
plot_baseball("All Teams", baseball)
plot_baseball = function(teamName, dataframe) {
agg <- aggregate(x = dataframe[, c(4,12)],
by = list(dataframe$yearID),
FUN = count)
plot(x = agg$Group.1, y = agg$x)
}
plot_baseball("All Teams", baseball)
plot_baseball = function(teamName, dataframe) {
agg <- aggregate(x = dataframe[, 12],
by = list(dataframe$yearID),
FUN = count)
plot(x = agg$Group.1, y = agg$x)
}
plot_baseball("All Teams", baseball)
LA_Angels <- baseball[baseball$teamID == "LAA", ]
plot_baseball("LA Angles", LA_Angels)
head(two_teams)
two_teams <- baseball[baseball$teamID == "PIT" | baseball$teamID == "ATL",]
head(two_teams)
print(factor(two_teams$teamID)
print(factor(two_teams$teamID))
#exercise 1.5
easy_plot = function(x, y, color_data) {
median_color <- median(color_data)
levels <- ifelse(color_data < median_color, "low","high")
levels = factor(levels)
print(median_color)
plot(x = x, y = y, col = levels, pch=20)
print(cor.test(x, y))
}
print(factor(two_teams$teamID))
two_teams <- baseball[baseball$teamID == "PIT" | baseball$teamID == "ATL",]
two_teams$teamID <- factor(two_teams$teamID)
head(two_teams)
plot_baseball = function(teamName, dataframe) {
agg <- aggregate(x = dataframe[, c(4, 12)],
by = list(dataframe$yearID),
FUN = count)
print(head(agg))
plot(x = agg$Group.1, y = agg$x)
}
plot_baseball("All Teams", baseball)
LA_Angels <- baseball[baseball$teamID == "LAA", ]
plot_baseball("LA Angles", LA_Angels)
plot_baseball = function(teamName, dataframe) {
agg <- aggregate(x = dataframe[, c(4, 12)],
by = list(dataframe$yearID),
FUN = count)
print()
plot(x = agg$Group.1, y = agg$HR)
}
plot_baseball("All Teams", baseball)
plot_baseball = function(teamName, dataframe) {
agg <- aggregate(x = dataframe[, c(4, 12)],
by = list(dataframe$yearID),
FUN = count)
print(head(agg))
plot(x = agg$Group.1, y = agg$HR)
}
plot_baseball("All Teams", baseball)
plot_baseball = function(teamName, dataframe) {
agg <- aggregate(x = dataframe[, c(4, 12)],
by = list(dataframe$yearID),
FUN = count)
print(head(agg))
plot(x = agg$Group.1, y = agg$HR)
}
plot_baseball("All Teams", baseball)
LA_Angels <- baseball[baseball$teamID == "LAA", ]
plot_baseball("LA Angles", LA_Angels)
two_teams <- baseball[baseball$teamID == "PIT" | baseball$teamID == "ATL",]
two_teams$teamID <- factor(two_teams$teamID)
head(two_teams)
two_teams <- baseball[baseball$teamID == "PIT" | baseball$teamID == "ATL",]
two_teams$teamID <- factor(two_teams$teamID)
plot_baseball("PIT and ATL Homeruns Over Time")
#Exercise 2.1
iris
#This data gives measurements for flower characteristics of various species of irises
dim(iris)
#Exercise 2.2
str(iris)
#Exercise 2.2
glimpse(iris)
#Exercise 2.2
library(tidyverse)
str(iris)
glimpse(iris)
#sepal length, sepal width, petal length, and petal width are continous. Species is categorical. The types are dbl, dbl, dbl, dbl, fct, respectively
hist(iris$Sepal.Length)
hist(iris$Sepal.Width)
hist(iris$Petal.Length)
his(iris$Petal.Width)
#sepal length, sepal width, petal length, and petal width are continous. Species is categorical. The types are dbl, dbl, dbl, dbl, fct, respectively
hist(iris$Sepal.Length)
hist(iris$Sepal.Width)
hist(iris$Petal.Length)
his(iris$Petal.Width)
hist(iris$Petal.Length)
hist(iris$Petal.Width)
#the sepal distributions are appropximately normal, while the petal distribution includes a large amount of observations in the lower end
mean_speal_width <- mean(iris$Sepal.Width)
iris_copy <- iris
#the sepal distributions are appropximately normal, while the petal distribution includes a large amount of observations in the lower end
mean_sepal_width <- mean(iris$Sepal.Width)
iris_copy <- iris
narrow_sepal <- ifelse(iris_copy$Sepal.Width < mean_sepal_width, TRUE, FALSE)
head(narrow_sepal)
iris$narrow_sepal <- narrow_sepal
boxplot(iris$Sepal.Width ~ iris$narrow_sepal)
boxplot(iris$Sepal.Width ~ iris$narrow_sepal)
#Exercise 2.5
#based on the plots, setosa seems to be the most unique, while versicolor and virginica are more similar
?pairs
args(pairs)
args(pairs)
pairs(iris)
iris
pairs(iris_copy)
iris_copy[,-5]
pairs(iris_copy)
iris_copy
iris_copy[,-5]
pairs(iris_copy)
iris_copy
iris_copy[,-4]
iris_copy[, -5]
pairs(iris_copy)
iris_copy <- iris
iris_copy[, -5]
pairs(iris_copy)
iris_copy
iris_copy[, -5]
iris_copy
#Exercise 2.5
#based on the plots, setosa seems to be the most unique, while versicolor and virginica are more similar
iris
#Exercise 2.1
iris
#the sepal distributions are appropximately normal, while the petal distribution includes a large amount of observations in the lower end
mean_sepal_width <- mean(iris$Sepal.Width)
iris_copy <- iris
narrow_sepal <- ifelse(iris_copy$Sepal.Width < mean_sepal_width, TRUE, FALSE)
iris_copy$narrow_sepal <- narrow_sepal
boxplot(iris_copy$Sepal.Width ~ iris_copy$narrow_sepal)
iris[,-6]
#Exercise 2.5
#based on the plots, setosa seems to be the most unique, while versicolor and virginica are more similar
iris
#Exercise 2.1
iris
#This data gives measurements for flower characteristics of various species of irises
dim(iris)
iris[, -6]
#Exercise 2.1
iris
iris[, -6]
#Exercise 2.1
iris
#Exercise 2.5
#based on the plots, setosa seems to be the most unique, while versicolor and virginica are more similar
iris
iris_copy[, -5:-6]
pairs(iris_copy)
iris_copy
pairs(iris_copy[, -5:-6])
head(baseball)
plot_baseball = function(teamName, dataframe) {
plot(x = dataframe$yearID, y = dataframe$HR, col = factor(dataframe$teamID))
}
plot_baseball("All Teams", baseball)
plot_baseball = function(teamName, dataframe) {
plot(x = dataframe$yearID, y = dataframe$HR, col = factor(dataframe$teamID),
xlab = "Year", ylab = "Num Home Runs By A Player", main = "Home Runs Over Time Across Teams")
}
plot_baseball("All Teams", baseball)
plot_baseball = function(teamName, dataframe) {
plot(x = dataframe$yearID, y = dataframe$HR, col = factor(dataframe$teamID),
xlab = "Year", ylab = "Num Home Runs By A Player", main = paste("Home Runs Over Time Across", teamName))
}
plot_baseball("All Teams", baseball)
plot==baseball("LA Angels", LA_Angels)
plot_baseball = function(teamName, dataframe) {
plot(x = dataframe$yearID, y = dataframe$HR, col = factor(dataframe$teamID),
xlab = "Year", ylab = "Num Home Runs By A Player", main = paste("Home Runs Over Time Across", teamName))
}
LA_Angels <- baseball[baseball$teamID == "LAA", ]
plot==baseball("LA Angels", LA_Angels)
plot_baseball("LA Angels", LA_Angels)
plot_baseball("The PIT And ATL Teams", Pit_or_Atl)
Pit_or_Atl <- baseball[baseball$teamID == "PIT" | baseball$teamID == "ATL", ]
plot_baseball("The PIT And ATL Teams", Pit_or_Atl)
